
ACTIVITY 1: Find Cmdlets

Ensure that you have the latest copy of help by updating your help system.
#update-help

Which cmdlets deal with the viewing/manipulating of processes?
#get-process; start-process; stop-process; wait-process; debug-process

Display a list of services installed on your local computer.
#get-service

What cmdlets are used to write or output objects or text to the screen?
#write-host

What cmdlets can be used to create, modify, list, and delete variables?
# clear-variable; get-variable; new-variable; remove-variable; set-variable

What cmdlet can be used, other than Get-Help, to find and list other cmdlets?
#get-command

Find the cmdlet that is used to prompt the user for input.
#read-host




----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ACTIVITY2: Running Cmdlets

Display a list of running processes.
#get-process

Display a list of all running processes that start with the letter "s".
#get-process 'S*'

Find the cmdlet and its purpose for the following aliases:
#

gal
#gal -> Get-Alias

dir
#dir -> Get-Childitem

echo
#echo -> Write-Output

?
#? -> Where-Object

%
#% -> ForEach-Object

ft
#ft - > Format-Tablere the objects results into variables to be used in the custom object

Display a list of Windows Firewall Rules.
#Get-NetFirewallRule

Create a new alias called "gh" for the cmdlet "Get-Help"
#Set-Alias -Name gh -Value Get-Help
##-name and -value are optional
ent -path <file> -value ""
##add-content -path <file> -value ""
##(Get-Content <file>)[0]    ### displays via index of file


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ACTIVITY 3: Variables

Create a variable called "var1" that holds a random number between 25-50.
set-varaible var1 (Get-Random -min 25 -max 50)

Create a variable called "var2" that holds a random number between 1-10.
set-varaible var2 (Get-Random -min 1 -max 10)

Create a variable called "sum" that holds the sum of var1 and var2.
$sum=$var1+$var2

Create a variable called "sub" that holds the difference of var1 and var2.
$sub=$var1-$var2

Create a variable called "prod" that holds the product of var1 and var2.
$prod=$var1*$var2

Create a variable called "quo" that holds the quotient of var1 and var2.
$quo=$var1/$var2

Replace the variables in text with their values in the following format:
Write-Host "$var1" + "$var2" = "$sum"


"var1" + "var2" = "sum"

Replace the variables in text with their values in the following format:
Write-Host "$var1" - "$var2" = "$sub"


"var1" - "var2" = "sub"

Replace the variables in text with their values in the following format:
Write-Host "$var1" * "$var2" = "$prod"


"var1" * "var2" = "prod"

Replace the variables in text with their values in the following format:
Write-Host "$var1" / "$var2" = "$quo"


"var1" / "var2" = "quo"

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
ACTIVITY4: Reverse Arrays

Create an array containing a range with a random starting and stopping point.  The starting point will be a random number from -10 through 0.
The ending point will be a random number from 1 through 20.

$arr=@(-9..12)    
##-OR-            $start = get-random -min -10 -max 1
                  $stop = get-random -min 1 -max 20
                  $arr=$start..$stop
                  $arr
                  -OR-
                    $arr = (get-Random -min 10 -max 1)..(Get-Random -Min 1 -max 20)
                    $arr
For example, if the first random number is -3, and the second random number is 2, your array will be -3, -2, -1, 0, 1, 2


Create a variable that contains the contents of the array in reverse
$newarr=$arr[-22..-1]

    

    $reverse = $arr[($arr.length-1)..0]
    $reverse

Using the above example, your reversed array will be 2, 1, 0, -1, -2, -3


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
ACTIVITY5: Arrays & Hash Tables
$employee1=@{}
$employee2=@{}
$employee1=[ordered]@{first="mary"; last="hopper"; id="001" ; job="software developer"}
$employee2=[ordered]@{first="john"; last="williams"; id="002" ; job="web developer"}
$employee1.add("Username", "mhopper001")                                                                                                                                                       
$employee2.add("Username", "jwilliams002")                                                                   
$employee1["job"]= "software lead"ent -path <file> -value ""
##add-content -path <file> -value ""
##(Get-Content <file>)[0]    ### displays via index of file

$employee3=[ordered]@{first="alex"; last="moran"; id="003" ; job="software developer"}
$employee1["status"]= "management"                                                                    
$employee2["status"]= "intermediate"                                                                  
$employee3["status"]= "entry level"


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
The Pipeline Activity 6:

Display the start time of the earliest and latest running processes
#ps |where-object processname -ne "Idle"| Sort-Object starttime | Select-Object -first 1 -last 1 | Format-Table processname, starttime

Identify a cmdlet that returns the current date and time then using this cmdlet and Select-object, display only the current day of the week
#Get-Date | format-table dayofweek

Identify a cmdlet that displays a list of installed hotfixes.
#Get-Hotfix

Extend the expression to sort the list by install date, and display only the install date and hotfix ID.
#Get-HotFix |sort-object -property installedon | format-table installedon, hotfixid

Extend the expression further, but this time sort by description, include description, hotfix ID, and install Date.
#Get-HotFix |sort-object -property description | format-table description, hotfixid, installedon







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Activity 7: 
Create a custom object that contains information about the host system using the following:

Win32_ComputerSystem

Win32_BIOS

Win32_OperatingSystem

Win32_LogicalDisk

Use the cmdlet Get-WmiObject to obtain the needed information


Endstate


ComputerName    : DESKTOP-5KJDVS2
OperatingSystem : Microsoft Windows 10 Pro
Version         : 10.0.17134
Manufacturer    : Dell Inc.
Disks           : {\\DESKTOP-                          5KJDVS2\root\cimv2:Win32_LogicalDisk.DeviceID="C:",
                  \\DESKTOP-5KJDVS2\root\cimv2:Win32_LogicalDisk.DeviceID="D:"}

$compinfo = gwmi win32_computersystem
$osinfo = gwmi win32_operatingsystem
$biosinfo = gwmi win32_bios
$diskinfo = win32_logicaldisk

myobject = new-object -Typename psobject

$myobject | add-member -membertype -noteproperty -name computername -value $compinfo.name
                                                 -name operatingsystem -value $osinfo.caption
                                                 -name version -value $osinfo.version
                                                 -name manuf -name $biosinfo.manufacturer
                                                 -name Disks -value $diskinfo._path
           


------------------------------------------------------------------------------------------------------------------------------------------------------------------
Comparison and Condition Activity 8:

Find and extract the model number from the provided lines of text. If there isn’t a model number then display to the user that a model number wasn’t found
Check both lines for model numbers and report individually the line and model number if found

Use the following variables for your script

$line1 = "Do you have model number: MT5437 for john.doe@sharklasers.com?"
$line2 = "What model number for john.doe@sharklasers.com?"


Exercise Criteria
Must use at least ONE comparison operator
Must use at least ONE If Condition OR Switch Statement
Reminder of options available

Switch Statement
If/IfElse/Else Condition
match, contains, in, -eq, -le, etc…​
Comparison combinations

$line1
$line2
$modelpat = '([A-Za-z]{2})\d{2,5}'
switch($modelpat)
{
    {$line1 -match $_} {
        $line1 -match $modelpat | out-null
        $model = $matches[0]
        "yes the model number is $model" }
    { $line2 -match $_} {
    $line2 -match $modelpat | out-null
    $modelpat = $matches[0]
         "yes the model number is $model" }
    {$line1 -notmatch $_} {
        "There is no model number in line1" }
    {$line2 -notmatch $_} {
    "There is no model number in line2"}


}
--------------------------------------------------------------------------------------------------------------------------------------------------------


ACTIVITY 9: Looping & Iteration

Part 1
Use an array to iterate and open the following
Notepad
MS Edge
MSpaint

Query the processes

Kill the processes from PowerShell

$process="notepad", "mspaint", "msedge"
foreach ($proc in $process) { start-process $proc;get-process $proc;stop-process -name $proc}

-OR-
$procs | ForEach-Object {Start-Process $_}
Get-Process
$procs | ForEach-Object { Stop-Process -processname $_}




Part 2
Use an array to iterate and open the following
Notepad
MS Edge
MSpaint

Query the processes

Save the ProcessIDs to a text file called procs.txt

Iterate through the ProcessIDs in the text file and kill them

$process=("notepad", "mspaint", "iexplore")
$file = "$pwd\procs.txt"
foreach ($proc in $process) { start-process $proc;get-process -name $proc; add-content -path $file -value (Get-Process -name $proc | Select-Object -ExpandProperty ID)}



-OR-
$process | ForEach-Object { Start-Process $_}
$file = "$pwd\procs.txt"
foreach ($proc in $process){get-process | Where-Object{$_.Name -like $proc} | ForEach-Object{Add-Content $file $_.ID}
Get-Content .\procs.txt | ForEach-Object{Stop-Process -id $_}


Part 3
Use an array to iterate and open the following
Notepad
MS Edge
MSpaint

Query the processes and display only the following information in order by process ID
Process ID
Process Name
The time the process started
The amount of time the process has spent on the processor
The amount of memory assigned to the process

$process="notepad", "mspaint", "msedge"
$process | ForEach-Object { start-process $_}
foreach($proc in $process){ Get-Process | Where-Object{$_.Name -like $proc} | FT -Property id, name ,starttime, totalprocessortime, VirtualMemorySize, WorkingSet64 }











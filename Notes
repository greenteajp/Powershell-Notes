## LOGIN
xfreerdp /u:student /v:10.50.36.193 /dynamic-resolution +glyph-cache +clipboard


update-help -Force -ErrorAction SilentlyContinue
-ShowWindow for a "get-help/man 'cmdlet' " diplays a windows, usefull for ctrl-f

Day 1:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

get-childitem -path C:\ -recurse -filter *.pf -name

#switch parameter: Boolean in nature. when used, the parameter is turned on
#otherwise its off by default
#-recurse

#positional parameters: 
#i.e '-path' , automatically added with get-childitem
#default, '-filter' filters on one thing at a time
#'-filter *.pf', parameter set


gci -Red C:\Windows\System32 -filt *.pf -na
get-childitem -recurse -filter *.pf C:\ -name
#can shorten -recurse to -rec -re; and -filter to -filt ; -name to -na


get-service -name power,dnscache
#get-service power,dnscache


get-command -verb get | measure
get-command -Noun *item | item | *item*
Get-Command *fire*
Get-Command get-*fire*
#Best use:: get-command *keyword* i.ie tcp,udp, item, etc

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Alias:
$alias:man, etc...      echo=Write-Host
#alias stored in variable $alias

get-alias -definition get-childitem
#setting/deleting alias. Only last per session, need persistence
set-alias lmao explorer.exe
del alias:lmao

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Variables:
int
string
array


$number=61742
$number - 1   ##variable substitution
$var = gci C:\Windows

$nospaces="death"

$var1,$var2 = 25, 5   ###can create multiple variables in one line
$var1 = $var2 = $var 3 = 25 ##3 all three v ariables equal same value

get-variable var1 ### must omit the '$'       //### gci variable:  ##to get list of variables, or just get-variable

###Boolean
$true
$false

###Environmental Variables:
#variables that do not go away, global/system wide
$env:HomePath = $HOME    


### Need to know automatic variables!!!!!:

$args           ###
Contains an array of values for undeclared parameters that are passed to a function, script, or script block. 
When you create a function, you can declare the parameters by using the param keyword or by adding a comma-separated list 
of parameters in parentheses after the function name.

$input          ###for being, end etc
Contains an enumerator that enumerates all input that is passed to a function. 
The $input variable is available only to functions and script blocks (which are unnamed functions).

$_    ###same as $PSItem                        ###for pipelines
Same as $PSItem. Contains the current object in the pipeline object. 
You can use this variable in commands that perform an action on every object or on selected objects in a pipeline.

$PROFILE   ###Like bashrcContains the full path of the PowerShell profile for the current user and the current host application. You can use this variable to represent the profile in commands. For example, you can use it in a command to determine whether a profile has been created:
Contains the full path of the PowerShell profile for the current user and the current host application. 
You can use this variable to represent the profile in commands. 
For example, you can use it in a command to determine whether a profile has been created:



$null
$null is an automatic variable that contains a null or empty value. 
You can use this variable to represent an absent or undefined value in commands and scripts.


###Type Casting
$int="something"
$int.GetType().name == string

$int=4

ACTIVITY: Looping & Iteration

    Part 1

        Use an array to iterate and open the following

            Notepad

            MS Edge

            MSpaint

        Query the processes

        Kill the processes from PowerShell

    Part 2

        Use an array to iterate and open the following

            Notepad

            MS Edge

            MSpaint

        Query the processes

        Save the ProcessIDs to a text file called procs.txt

        Iterate through the ProcessIDs in the text file and kill them

    Part 3

        Use an array to iterate and open the following

            Notepad

            MS Edge

            MSpaint

        Query the processes and display only the following information in order by process ID

            Process ID

            Process Name

            The time the process started

            The amount of time the process has spent on the processor

            The amount of memory assigned to the process

This $int.GetType().name == Int32

[string]$int= 42
$int.GetType().name == String

[string]$string = 'balloon'
[int]$string.GetType().name ### temporaily changes to int, then back again b/c cannot make a string an int

[int]6.5 = 6
[int]6.6 = 7
[float]6.6== 6.6
[double]6.4 == 6.4
[int]0xFF == 255, converts hex

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Arrays:
###set of multiple values that one can index through

Ways to make arrays:
$array=@()  
$number_arr= 4, 5,6
[array]$blank_array=""    ###$blank_array.count will equal 1, thus not exactly empty, throws off indexes

$number.arr.Getype().basetype.name ### check if it is an array   ###$array -is [array]   another way for checking if a variable is an array( can be used for int, float, etc...)
if ($array.count -eq 0) { write-host "empty like my mind"}   ### compares to see if array is empty

$poly_arr = (Get-ComputerInfo), "help me", 6472   ### can have strings, numbers, and cmdlets
$poly_arr[1] ### reference element in array by index
$poly_arr | Select-Object -Index 2 ### also like the above

$seq_nums= 4..50  ###iterates through 1-50
$seq_nums[-1], ### refernces the last element ### [-1..-5], [1,2,3,4,5] etc...


###Nested Array
Normal/Traditional Array -> $array = 1, 2, 3
Nested/Jagged Array -> $nested=@, !, $array, # -> {@, !, {1, 2, 3}, #}
                                                    output:
                                                   @, $null, $null,
                                                   !, $null, $null,
                                                   1,      2,     3,
                                                   #, $null,$null,
 $nested[2]= 1, 2, 3
 $nested[2][1] = 2
 $nested[3][1] = $error   ### tried to grab null
 
 
 
 ###Multi-Dimensional -> $multi = tri, square, $nested, cir
 -> {tri, square, {@, ! {1, 2, 3}Custom Object, #},cir}
 output:
 tri, $null
 square,
 @     , !, 1, #            ### fills the empty spaces with '$null'
            2,
            3,
 cir
 
 $multi[2]= @, !, {1, 2, 3}, #
 $multi[2][2]= 1,2 ,3
 $multi[2][2][1] = 2
 $multi[1][2][3] = $error
      

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Hash Table:
 
$hashy=@{key="value" ; key2="value2" ; } #manually creates a hash table

$another=@{}        ###empty hash table
$another.Ayy_Lmao = "yes"       ###adds to hash table
$another["AYYY"] = "lmao"   ###same as above
$another.Add("Kannneeeda","Tetsuuuoooo")      ###same as above

$ordered = [ordered]@{}
$ordered."McDonalds" = @("BigMac", "1 Chiccy Nuggy", "Caramel Frappe", "2 Lg Fries")
        ### Name = McDonalds ; Value = "BigMac......."
$ordered["Chik-fila-A"]="Salad"
$ordered.Add("Taco Bell", "shits")
$ordered."Chik-fila-A"    -OR- $ordered.["chik-fila-A"]       ### calls the value for the key/name

$orderd.keys/.values    ### shows said item
$ordered["Taco Bell", "McDonalds"]   ### gets values for two keys

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PIPELINES!!!!:

##### works for any cmdlet
get-service | format-table *   
get-service | format-list *   
get-service | get-memeber     ### gives methods and properties of get-service
get-member -InputObject get-service     ###gives methods specific for get-service
get-Service bfe | get-Member     ### gives methods/property for 'bfe'
(Get-Service bfe).StartType       ### shows startype, i.e 'automatic'
(get-service bfe).stop()          ### stops a service
Get-Service | sort-object -property status    ###orders stopped/running
Get-Service | group-object -property status     ###groups number of stopped/running
Get-Service | Sort-Object status,name     ###sorts of status, then name in alpha

Get-Service | Where-Object {$_.status -eq "Running"}      ###gives only running services
ps | where-object {$_.Name -notlike 'powershell*' } | Sort-Object id -Descending
ps | select-object -first 10
ps svchost | Select-Object -ExpandProperty handles

gci | Measure-Object length
gci | Measure-Object length -Average -Maximum -Minimum -sum





'1', '7', '10', '8', '2', '3' | Sort-Object   ###sorts in ascii order
'1', '7', '10', '8', '2', '3' | Sort-Object -Property {[int]$_}     ###sorts as integers
1..10 | sort-object -Property {Get-Random}      ###sorts in random order


###write-host sensd to screen, cant pipeline 
###write-output puts it through pipeline 


Get-Command -Verb format ###gives methods of formating
###format-wide/table/list/custom
I.E. get-service| format-table name, status


$cols = @{Label='KB'; Expression = { [ int]($_.Length/1KB) }}
gci | format-table name, $cols
 
 
 
 gci | Sort-Object -Property Extension | Format-Table -GroupBy Extension

###Compares between two different outputs
PS C:\Users\student\Documents\PowerShell Stuff> "ayy lmao" > test.txt

PS C:\Users\student\Documents\PowerShell Stuff> $before = gci

PS C:\Users\student\Documents\PowerShell Stuff> '42' > test.txt

PS C:\Users\student\Documents\PowerShell Stuff> $after = gci
PS C:\Users\student\Documents\PowerShell Stuff> compare-object $before $after -Property Length, Name

Length Name     SideIndicator
------ ----     -------------
    10 test.txt =>           
    22 test.txt <=           






    Create an advanced function using Begin, Process, and End, that takes two(2) arguments. The first argument being an array of at least ten(10) integers and the second argument being a single integer. Search the array argument for every occurrence of the single integer argument then return the sum of all elements in the array excluding every occurrence of the single integer argument.

Example

PS> get-multisum @(1,2,3,4,5,6,7,8,9,10) 5
50

    Create an advanced function using Begin, Process, End, that prompts the user to enter the names of three(3) U.S. States then returns the names of the states in the order of longest name to shortest name and the amount of characters in each name.

Example

PS> Get-LongestName
Georgia: 7
Idaho: 5
Utah: 4




----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ScriptBlock:
$mybloack = {get-service | format-table name, status}

& $myblock        #runs the scriptblock


alt:
$a = 1
$c = 1
$b = { 1 + 1 + $c }
$a += &$b


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Objects:
###Create new object using new-object
$mycar = New-Object Object 

### Adding properties using add-memeber
Add-Member -MemberType NoteProperty -Name color -value "Reddish-Orange" -InputObject $mycar

###Using shortened parameter names
Add-Member -Me NoteProperty -Na make -value Ford -input $mycar

Add-Member -InputObject $mycar noteproperty model "1969 429 Boss"

$mycar | add-member noteproperty Cab "Four-Door"

Add-Member -me ScriptMethod -na drive -value {"Fast and loud"} -InputObject $mycar

Add-Member -me ScriptMethod -na handling -value {"No power steering, handles like a champ"} -InputObject $mycar

Add-Member -me ScriptMethod -na value/rairity -value {"Super Expensive, Super Rare"} -InputObject $mycar
$mycar |fl
$mycar.drive()
$mycar.make/model/Cab



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Conditionals:
##comparison operators if needed be case sensitive put a 'c' before it


# Equals     ###Always comparing to what is on the left
2 -eq 2
2 -eq 3
1,2,3 -eq 2
"abc" -eq "abc"
"abc" -eq "abc", "def" == false
"abc" , "def" -eq "abc" == abc

#Not equals
"abc" -ne "def" == true
"abc" -ne "abc" == false
"abc" -ne "abc", "def" == true
"abc", "def" -ne "abc" == def

#Greater Than
8 -gt 6 == true
7, 8, 9 -gt 8 == 9

#Less than
6 -lt 8 == true
7,8,9 -lt 9 ==  7,8

#Greater than or equal tp
6 -ge 6 == true
5,6,7 -ge 6 == 6,7

#Less than or equal to
6 -le 6 == true
5,6,7 -le 6 == 5,6

#like   uses wildcards
"inky" -like "*" == true
"Blinky" -like "Bl?nky" == true
"Pinky" -like "[L-Q]inky" == true
"Clyde" -like "[ABC]lyde" == true

#notlike  uses regex
"inky" -notlike "*"  == false
"Blinky" -notlike "Bli?nky" == true
"Pinky" -notlike "[A-F]inky"  == false
"Clyde" -notlike "[DEF]lyde"  == True

#match
$text = "Your account username is ACE4495"
$pattern = '([A-F]{3})(\d{4})'
$text -match $pattern  == true

#contains
$ghosts = 'Inky', 'Blinky', 'Pinky', 'Clyde'
$ghosts -contains 'pinky'  == true

#   -in    does the same as contains

Combining operators:
$num = 5
(($num -gt 1) -and ($num -lt 10))  == true       ## can also use -or
(($num -gt 4) -or ($num -lt 3))  == false







ps | Where-Object {$_.Company -like 'micro*' } | ft Name, description, company
gci *.txt | Where-Object{$_.length -gt 100}
get-service| where -object{$_.status -eq 'running'}



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
If/elif/switch:

###Basic syntax
##If stops whens somethings true
$x = 2
if ($x -eq 5) {
  write-host "Bob"
}f
elseif ($x -eq 4) {
  write-host "sue"
}
elseif ($x -eq 2) {
  "tom"
}
elseif ($x -gt 1) {
"mary"
}
else {
  "who am i?"
}



## switch lists everything that is true
switch(10)
{
  (1+9) {
    "congrats, you did adds right"
  }
  (1 + 10) {
    "this be wrong"
  }
  (11 - 1) {
      "congrats, you did minus right"
  }
  (1 - 11) {
      "congrats, you did math wrong  }
 }



#Example 2 multiple values
$num =2  #(Get-Random -mon 0 -max 10)
switch($num) {
{$_ -le 7} { "It is less than 7"}
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Loops:

##has to go through everything then outputs
###for each has to evaluate everything before it prints, must pipe
for (initialiation; condition; increment)
{
  code block to be executed.
}

##foreach
foreach ($item in expression)
{
  code block to be execute
} {


##foreach object, shows everything as its going
$object | foreach-object {code block to be executed }
foreach ($item in gci C:\ -recurse)($item.name)

##While loops
while(condition) {
  code block to be executed
}


##how to make the while loop run alteast once
do {
  code block
}while(condtion)


Ex1:
##
$num = 4

while($num -lt 3){$num;$num++ }

$num

Ex2:
##
$num = 4

do{
  $num
  $num++
}while($num -lt 3)

$num

Ex3:, samne as ex2^
##
$num = 4
do{
  $num
  $num++
}until($num -gt 3)

$num

Ex4
##
$num = 0
while($num -lt 4) {   #10
  $num += 1
  if($num -eq 2) {    #5
      continue #brea
  }
  $num
  
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Reading/Write to/from a file:

##get-content to read from a file
##set-content -path <file> -value ""
##add-content -path <file> -value ""
##(Get-Content <file>)[0]    ### displays via index of file

Shorten Paths:
$profile.AllUsersAllHosts


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Functions:


###Declare function -> 
    Function <function name> { <function code goes here> }

ex1. function Hello-World { 'Hello World!!!' }
        -OR-
    function Hello-World {
    'Hello World!!!'
    }

###call/execute function via name

###When a function is declared, it only exists for that individual PWSH session/script. Store in the function 'PSDrive'
        ***gci function:*   to view all of the functions
            get-content function: <function name>      
            
##Functions with a parameter
function <function name> ($<parameter name>) { <function code> }    ##parameter will be a varaible when passed to the function

ex1:
function basic-param ($value) {
if ($value) {
    write-host "The parameter is $value" -forgroundcolor green -nonewline
 }
else {
    write-host "There is no parameter being paseed" -forgroundcolor red
 }
}


##calling the fucntion:
basic-param 42 == The parameter is 42
-OR_
basic-param -value 42
The parameter is 42

basic-param == There is no parameter being passed


###multiple parameters:
function <function name> ($1, $2, $3) { <code> }

function many-params ($value1, $value2) {
        if ($value1 -gt $value2) {
            write-host "$value1"    -foregroundcolor green -nonewline
            write-host " is bigger than "   -nonewline
            write-host "$value2"    -foregroundcolor red -nonewline
           }
        elseif ( $value2 -gt $value1) {
            write-host "$value2"
            write-host "is bigger than "
            write-host "$value1"
           }
        else { return -1 }
}
many-params 4,2 -OR- many-params -valu1 6 -value2 8



###Functions with default paramters:
function <function name> {
param (
    $parameter1='<default value>', $parameter2='<default value>'
    )
    <function code
  }


ex1:
function Default-Params {
    param(
        $parameter1='90', $parameter2='65536' 
      )
        "The parameters passed are $parameter1 and $parameter2"
}
default-params 3389 445, above params are dset default until specified here



###Functions with switch parameters:
function <function name> {
    param(
        [switch]            ###boolean logic, either on/off
        $switchparam
     )
     <function code>
}
functionname -switchparam           ###how you turn switch on or off


###Mandatory Parameters
function <function name> {
    param(
        [Parameter(Mandatory=$true)]
        #The mandatory=$true forces the function to request a parameter if no argument was specififed when 
        calling the function
    $param
  )
    <function code>
}


ex1:
function mando-param {
    param(
        [Parameter(Mandatory=$True)]
        $param
     )
while ([string]::IsNullOrWhiteSpace($param)) {)

    $param = read-host -prompt "Enter a string"
       #if the param is null/empty, it will prompt for a string until a char is entered
 }
 
 
 
 
###Advanced functions
function <function name>
        param(
            [Parameter(Mandatory=$True,HelpMessage=<message>)]
          #the helpmessage will display the message once the user types "!?" when requesting the mandatory param
          $param
      )
      <function code>
 }
 
 
 ex1:
 function Help-Params {
    param([Parameter(Mandatory=$true,helpmessage="Type in a number")]
    [int]$param
  )
  
  "The argument `"$param`" was mandatory for the parameter"
}



function Positional-params {
param(
    [Parameter(Mandatory=$true,Position=0)]
    [int]
    $num,
    [Parameter(Mandatory=$true, Position=1)]
    [string]
    $string,
    [Parameter(Mandatory=$true,Position=2)]
    [string]
    $anotherstring
    )
    
    write-output "$num is the first postitional parameter"
    write-output "$string is the second"
    write-output "$anotherstring is the third positional parameter"
}
 Positional-params -string "balloons" 1 "five"




function cmdlet-function {
[CmdletBinding(DefaultParameterSetName='Tacos')]
    param(
        [Parameter(ParameterSetName="Tacos",Position=0, Mandatory=$true)]
        $flavor,
        [Parameter(ParameterSetName="Tacos", Mandatory=$true)]
        $cheese,
        [Parameter(ParameterSetName="Tacos", Mandatory=$true)]
        $spice,
        [Parameter(ParameterSetName="Burritos", Mandatory=$true)]
        $beans,
        [Parameter(ParameterSetName="Burritos", Mandatory=$true)]
        $rice
        )
        $ParameterSetName = $PSCmdlet.ParameterSetname
        "The $ParameterSetName Parameter Set was utilized"       
}

 
 
 
 
 ###FunctionBlocks
 
function function-blocks {
[CmdletBinding()]
        param()
        
        Begin{...}
        # this is used to provide optional one-time preprocessing for the function
        #does whatever is in here prior to anything else in the function
      
        Process{...}
        #this block is used to provide record-be-record processing for the function.
        #executes code as many times as necessary based off how mnay objects are sent to the function through PWSH pipline
        #can use '$_' to grab the individual values passed to the function without having to call on $input or $args.
        
        End{...}
        #This block is used to provide optional one-time post-processing for the function
        #Executes this code at the end of the function prior to exiting the function
        
        
}
Function-Blocks
 
 
 
 
 ---------------------------------------------------------------------------------------------------------------------------------------------------------
 Regex/Backticks:
 `
 `n ### newline
 `` #excape character
 `t #tab
 "They said `"Hello`""
 
@"
They said
`"Hello`"
"@

$var= "-Abraham"
invoke-expression @"
`"Hello`"
write-host $null            ###empty line
`$var
"@
$Howmanyneeded = "One petabyte can store $(1PB / 2.39MB) Instances of DOOM (1993)"          $$$ the '$' performs the calculation



"string" -split("r")
 ("C:\filepath\directory\..." -split('\\'))[-1] ### gets the final path of
 
 
 REGEX:
 \d ### digits
 \D ### anything but a digit
 \w ### letter number or character
 \W ### not a letter number or character
 \s ### whitespace
 \S ### not a whitespace
 \n ### linebreak , newline
 \b ### boundary
 $ ### begining of a line
 ^ ### end of a line
 | ### or
 [a-z] ### matches a through z, lower
    [abz], a or b or z
 (abz) ### matches the pattern 'abz'
 [^zxy] ### matches anything but z or x or y
 & ### and
 * ### anything
 ? ### none or once
 {7} ### exactly 7 times
 {3,} ### atleast 3 times
 {1,3} ### min one to three times
 + ### once or multiple
 
 (yes|no) ### yes or no
 [a-z0-9] ### matches for lower for a character within a -> z / 0 -> 9
 
 
 $arr=@('PSC', 'We_Graduated_COSC', 'Happiness')
 $arr -join('=')
 
"I really love the weather in Cali" -replace 'Cali','Florida'





